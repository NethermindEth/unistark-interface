/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { TestRouter } from "../TestRouter";

export class TestRouter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<TestRouter> {
    return super.deploy(overrides || {}) as Promise<TestRouter>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestRouter {
    return super.attach(address) as TestRouter;
  }
  connect(signer: Signer): TestRouter__factory {
    return super.connect(signer) as TestRouter__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestRouter {
    return new Contract(address, _abi, signerOrProvider) as TestRouter;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_fromToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_toToken",
        type: "address",
      },
    ],
    name: "getPath",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_fromToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_toToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_maxSlippage",
        type: "uint256",
      },
    ],
    name: "swapTokenForToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805534801561001457600080fd5b506101d7806100246000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063228946141461003b578063d88e3e3b14610065575b600080fd5b610052610049366004610113565b50909392505050565b6040519081526020015b60405180910390f35b61007861007336600461014e565b610085565b60405161005c9190610170565b604080516003808252608082019092526060916000919060208201848036833701905050905083816000815181106100bf576100bf6101b4565b602002602001018181525050600054816001815181106100e1576100e16101b4565b6020026020010181815250508281600281518110610101576101016101b4565b60209081029190910101529392505050565b600080600080600060a0868803121561012b57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000806040838503121561016157600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156101a85783518352928401929184019160010161018c565b50909695505050505050565b634e487b7160e01b600052603260045260246000fdfea164736f6c634300080e000a";
